<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <link rel="preconnect" href="https://fonts.googleapis.com" />
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
 <link href="https://fonts.googleapis.com/css2?family=Inter&family=Playfair+Display&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="/css/admindashboard.css">
  <title>Admin Dashboard</title>
</head>
<body>
  <div class="dashboard-container">
    <aside class="sidebar">
      <h2 class="logo">Welcome, <%= user.username %></h2>
      <ul class="nav">
        <li class="<%= currentPath === '/dashboard' ? 'active' : '' %>">
          <a href="/user/dashboard" class="link_a">Dashboard</a>
          <img src="/assets/dashimg.svg" alt="">
        </li>
        <li class="<%= currentPath === '/orders' ? 'active' : '' %>">
          <a href="/user/orders" class="link_a">Orders</a>
          <img src="/assets/orderimg.svg" alt="">
        </li>
        <li class="<%= currentPath === '/new-orders' ? 'active' : '' %>">
          <a href="/user/new-orders" class="link_a">New Orders</a>
          <img src="/assets/newimgorder.svg" alt="">
        </li>
        <li class="<%= currentPath === '/settings' ? 'active' : '' %>">
          <a href="/user/settings" class="link_a">Settings</a>
          <img src="/assets/settingsimg.svg" alt="">
        </li>
      </ul>
    </aside>

    <main class="main-content">
      <header class="top-bar">
        <div class="admin-info">
          <form action="/auth/logout" method="post">
            <button class="logout-btn">
              <p class="logout-text">Logout</p>
              <img src="/assets/logout.svg" alt="logout-svg">
            </button>
          </form>
        </div>
      </header>

      <section class="content-area">
        <h1>Dashboard Overview</h1>

        <!-- Summary Cards -->
        <div class="summary-cards">
          <div class="card show">
            <div class="card-title">Completed Orders</div>
            <div class="card-value"><%= commpletedOrder %></div>
          </div>

          <div class="card show" style="animation-delay: 0.2s;">
            <div class="card-title">Today's Orders</div>
            <div class="card-value"><%= todaysOrderCount %></div>
          </div>

          <div class="card show" style="animation-delay: 0.3s;">
            <div class="card-title">Today's Sales</div>
            <div class="card-value">â‚¦<%= todayTotalPrice.toLocaleString("en-NG", { minimumFractionDigits: 2, maximumFractionDigits: 2 })%></div>
            <div class="percent-change <%= percentChangeOfTotalPrice > 0 ? 'positive' : (percentChangeOfTotalPrice < 0 ? 'negative' : '') %>">
              <% if (percentChangeOfTotalPrice > 0) { %>ðŸ”º<% } else if (percentChangeOfTotalPrice < 0) { %>ðŸ”»<% } %>
              <%= Math.abs(percentChangeOfTotalPrice).toFixed(2) %>%
            </div>
          </div>

          <div class="card show" style="animation-delay: 0.4s;">
            <div class="card-title">This Week's Orders</div>
            <div class="card-value"><%= thisWeekCount %></div>
            <div class="percent-change <%= percentChange > 0 ? 'positive' : (percentChange < 0 ? 'negative' : '') %>">
              <% if (percentChange > 0) { %>ðŸ”º<% } else if (percentChange < 0) { %>ðŸ”»<% } %>
              <%= Math.abs(percentChange).toFixed(2) %>%
            </div>
          </div>

          <div class="card show" style="animation-delay: 0.5s;">
            <div class="card-title">This Month's Sales</div>
            <div class="card-value">â‚¦<%= thisMonthTotalPrice.toLocaleString("en-NG", { minimumFractionDigits: 2, maximumFractionDigits: 2 }) %></div>
            <div class="percent-change <%= percentChangeOfTotalPriceMonthly > 0 ? 'positive' : (percentChangeOfTotalPriceMonthly < 0 ? 'negative' : '') %>">
              <% if (percentChangeOfTotalPriceMonthly > 0) { %>ðŸ”º<% } else if (percentChangeOfTotalPriceMonthly < 0) { %>ðŸ”»<% } %>
              <%= Math.abs(percentChangeOfTotalPriceMonthly).toFixed(2) %>%
            </div>
          </div>

           <div class="card show" style="animation-delay: 0.8s;">
            <div class="card-title">Total Paid Orders</div>
              <div class="card-value"><%= paidOrdersCount %></div>
          </div>


          <div class="card show" style="animation-delay: 0.6s;">
            <div class="card-title">Total Unpaid Orders</div>
            <div class="card-value"><%= unpaidCount %></div>
          </div>

          <div class="card show" style="animation-delay: 0.7s;">
            <div class="card-title">Total Unpaid Amount</div>
             <div class="card-value">â‚¦<%= totalUnPaidAmount.toLocaleString("en-NG", { minimumFractionDigits: 2, maximumFractionDigits: 2 })%></div>
          </div>

          <div class="card show" style="animation-delay: 0.8s;">
            <div class="card-title">Total Revenue</div>
              <div class="card-value">â‚¦<%= totalRevenue.toLocaleString("en-NG", { minimumFractionDigits: 2, maximumFractionDigits: 2 })%></div>
          </div>

        </div>

        <!-- Charts -->
        <div class="charts">
          <div class="chart-container chart-container1">
            <div class="chart-title">Weekly Sales</div>
            <canvas id="lineChart"></canvas>
          </div>

          <div class="chart-container">
            <div class="chart-title">Most Ordered Items</div>
            <canvas id="pieChart"></canvas>
          </div>
        </div>
      </section>
    </main>
  </div>

  <!-- Chart.js CDN -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script>
     const graphData = <%- JSON.stringify(graphData) %>;
  const labels = graphData.map((d) => d.date);
  const totals = graphData.map((d) => d.totalSales); // Make sure you're using the correct key

  const lineCtx = document.getElementById('lineChart').getContext('2d');

  const comboChart = new Chart(lineCtx, {
    type: 'bar', // Base type
    data: {
      labels,
      datasets: [
        {
          type: 'bar',
          label: 'Sales (Bar)',
          data: totals,
          backgroundColor: '#7F5AF0',
          borderRadius: 6,
        },
        {
          type: 'line',
          label: 'Sales (Line)',
          data: totals,
          borderColor: 'var(--primary)',
          backgroundColor: '#6249D6',
          fill: false,
          tension: 0.3,
          pointRadius: 4,
          pointHoverRadius: 6,
          borderWidth: 2,
        }
      ]
    },
    options: {
      responsive: true,
      scales: {
        y: {
          beginAtZero: true,
          ticks: {
            color: 'white'
          },
          grid: {
            color: '#333'
          }
        },
        x: {
          ticks: {
            color: 'white'
          },
          grid: {
            color: '#333'
          }
        }
      },
      plugins: {
        legend: {
          labels: {
            color: 'white'
          }
        }
      }
    }
  });
    // Prepare data for pie chart
    function generateRandomColors(count) {;
  const colors = [];
  const step = 360 / count;
  for (let i = 0; i < count; i++) {
    const hue = Math.floor(i * step);
    colors.push(`hsl(${hue}, 70%, 60%)`);
  }
  return colors;
};

    const pieData = {
      labels: <%- JSON.stringify(pieChartData.lebels) %>,
      datasets: [{
        data: <%- JSON.stringify(pieChartData.data) %>,
        backgroundColor: generateRandomColors(<%- JSON.stringify(pieChartData.lebels.length) %>),
        hoverOffset: 10
      }]
    };

    const pieCtx = document.getElementById('pieChart').getContext('2d');
    const pieChart = new Chart(pieCtx, {
      type: 'doughnut',
      data: pieData,
      options: {
        responsive: true,
        plugins: {
          legend: {
            labels: {
              color: 'white'
            }
          }
        }
      }
    });
  window.addEventListener('resize', () => {
  comboChart.resize();
  pieChart.resize();
});
  </script>
</body>
</html>
